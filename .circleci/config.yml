version: 2.1
workflows:
  version: 2
  main:
    jobs:
      - test-behat
      - test-phpunit:
          name: "Test with PHP 7.4"
          php_version: "7.4"
      - test-phpunit:
          name: "Test with PHP 8.0"
          php_version: "8.0"
      - test-phpunit:
          name: "Test with PHP 8.1"
          php_version: "8.1"
      - test-phpunit:
          name: "Test with PHP 8.2"
          php_version: "8.2"
      - test-phpunit:
          name: "Test with PHP 8.3"
          php_version: "8.3"
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-behat
jobs:
  test-behat:
    working_directory: ~/pantheon-systems/wp-saml-auth
    parallelism: 1
    docker:
    - image: quay.io/pantheon-public/build-tools-ci:8.x-php8.2
    steps:
    - checkout
    - restore_cache:
        keys:
          - test-behat-dependencies-{{ checksum "composer.json" }}
    - run:
        composer install -n --prefer-dist
        chmod +x bin/*.sh
    - save_cache:
        key: test-behat-dependencies-{{ checksum "composer.json" }}
        paths:
          - vendor
    - run: echo $(openssl rand -hex 8) > /tmp/WORDPRESS_ADMIN_PASSWORD
    - run: |
        echo 'export TERMINUS_ENV=ci-$CIRCLE_BUILD_NUM' >> $BASH_ENV
        echo 'export TERMINUS_SITE=wp-saml-auth' >> $BASH_ENV
        echo 'export SITE_ENV=wp-saml-auth.ci-$CIRCLE_BUILD_NUM' >> $BASH_ENV
        echo 'export WORDPRESS_ADMIN_USERNAME=pantheon' >> $BASH_ENV
        echo 'export WORDPRESS_ADMIN_EMAIL=no-reply@getpantheon.com' >> $BASH_ENV
        echo 'export WORDPRESS_ADMIN_PASSWORD=$(cat /tmp/WORDPRESS_ADMIN_PASSWORD)' >> $BASH_ENV
        source $BASH_ENV
    - run: echo "StrictHostKeyChecking no" >> "$HOME/.ssh/config"
    - run: |
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "GITHUB_TOKEN environment variables missing; assuming unauthenticated build"
          exit 0
        fi
        echo "Setting GitHub OAuth token with suppressed ouput"
        {
          composer config -g github-oauth.github.com $GITHUB_TOKEN
        } &> /dev/null
    - run: |
        if [ -z "$TERMINUS_TOKEN" ]; then
          echo "TERMINUS_TOKEN environment variables missing; assuming unauthenticated build"
          exit 0
        fi
        terminus auth:login --machine-token=$TERMINUS_TOKEN
    - run: ./bin/validate-fixture-version.sh
    - run: ./bin/behat-prepare.sh
    - run: ./bin/behat-test.sh --strict
    - run:
        command: ./bin/behat-cleanup.sh
        when: always
  test-phpunit:
    parameters:
      php_version:
        type: enum
        enum:
          - "7.4"
          - "8.2"
          - "8.1"
          - "8.0"
    working_directory: ~/pantheon-systems/wp-saml-auth
    docker:
      - image: cimg/php:<< parameters.php_version >>
      - image: circleci/mariadb:10.4
    environment:
      - WP_TESTS_DIR: "/tmp/wordpress-tests-lib"
      - WP_CORE_DIR: "/tmp/wordpress/"
    steps:
      - checkout
      - restore_cache:
          keys:
            - test-phpunit-dependencies-{{ checksum "composer.json" }}
      - run: |
          composer update
          composer install -n --prefer-dist
          chmod +x bin/*.sh
      - save_cache:
          key: test-phpunit-dependencies-{{ checksum "composer.json" }}
          paths:
            - vendor
      - run:
          name: "Install Extras"
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4EB27DB2A3B88B8B
            sudo apt-get update
            sudo apt-get install subversion
            sudo apt-get install -y libmagickwand-dev --no-install-recommends
            yes '' | sudo pecl install imagick || true
            sudo docker-php-ext-enable imagick
            sudo docker-php-ext-install mysqli
            sudo apt-get install mariadb-client
      - run:
          name: "Run Tests"
          command: |
            composer test:install:withdb
            composer phpunit
      - run:
          name: "Run SimpleSAMLphp tests"
          command: |
            IS_CI="true" bash bin/test-all-versions.sh


